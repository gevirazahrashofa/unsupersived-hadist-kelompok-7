# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MJwA0RuBMAP1wUuzRmDyLgUrm3LGAHtW
"""

import streamlit as st
import pandas as pd
import plotly.express as px
from bertopic import BERTopic
from sentence_transformers import SentenceTransformer

# --- KONFIGURASI HALAMAN ---
st.set_page_config(
    page_title="Eksplorasi Tema Hadits",
    page_icon="üó∫Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- GAYA TAMPILAN (CSS) ---
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #2c3e50;
        text-align: center;
        margin-bottom: 1rem;
    }
    .sub-header {
        font-size: 1.5rem;
        color: #34495e;
        border-bottom: 2px solid #3498db;
        padding-bottom: 5px;
        margin-top: 2rem;
        margin-bottom: 1.5rem;
    }
    .hadith-expander {
        border: 1px solid #dfe6e9;
        border-radius: 0.5rem;
        padding: 1rem;
        margin-bottom: 1rem;
        background-color: #ffffff;
    }
    .metric-card {
        background-color: #f8f9fa;
        border-radius: 0.5rem;
        padding: 1rem;
        text-align: center;
        border: 1px solid #e9ecef;
    }
</style>
""", unsafe_allow_html=True)


# --- FUNGSI UNTUK MEMUAT MODEL & DATA (DENGAN PATH YANG DIPERBARUI) ---
@st.cache_resource
def load_model():
    """Memuat model BERTopic dan model embedding secara terpisah."""
    try:
        embedding_model = SentenceTransformer('sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2')
        # Path diubah di sini, tidak lagi menggunakan folder 'models'
        model_path = "bertopic_hadits_model"
        topic_model = BERTopic.load(model_path, embedding_model=embedding_model)
        return topic_model
    except Exception as e:
        st.error(f"Error saat memuat model dari path '{model_path}': {e}")
        st.error("Pastikan Anda sudah melatih dan menyimpan model di lokasi yang benar (tanpa folder 'models').")
        return None

@st.cache_data
def load_data():
    """Memuat data hadits yang sudah memiliki label topik."""
    try:
        data_path = "data/hadits_with_topics.csv"
        df = pd.read_csv(data_path)
        # Menghapus topik outlier dari analisis utama jika ada
        if -1 in df['topic'].values:
            df = df[df['topic'] != -1].copy()
        return df
    except FileNotFoundError:
        st.error(f"File data tidak ditemukan di '{data_path}'")
        st.error("Pastikan Anda sudah menjalankan clustering dan menyimpan hasilnya sebagai CSV di folder 'data'.")
        return None

# --- APLIKASI UTAMA ---
def main():
    st.markdown('<h1 class="main-header">üó∫Ô∏è Dasbor Eksplorasi Tema Hadits</h1>', unsafe_allow_html=True)
    st.info("Selamat datang! Dasbor ini membantu Anda memahami pengelompokan tema-tema hadits yang ditemukan oleh model AI secara visual.")

    # Memuat model dan data
    topic_model = load_model()
    df = load_data()

    if topic_model is None or df is None:
        st.warning("Aplikasi tidak dapat berjalan karena model atau file data tidak tersedia.")
        return

    # --- SIDEBAR: KONTROL DAN INFORMASI ---
    st.sidebar.title("‚öôÔ∏è Kontrol & Informasi")
    st.sidebar.header("Statistik Umum")

    st.sidebar.markdown(f"""
    <div class="metric-card">
        <h4>Total Hadits</h4>
        <p style="font-size: 2rem; font-weight: bold; color: #3498db;">{len(df):,}</p>
    </div>
    """, unsafe_allow_html=True)

    st.sidebar.markdown(f"""
    <div class="metric-card" style="margin-top: 1rem;">
        <h4>Jumlah Tema</h4>
        <p style="font-size: 2rem; font-weight: bold; color: #3498db;">{df['topic_theme'].nunique()}</p>
    </div>
    """, unsafe_allow_html=True)

    st.sidebar.header("Filter Tema")
    all_themes = ["Semua Tema"] + sorted(df['topic_theme'].unique().tolist())
    selected_theme = st.sidebar.selectbox("Pilih tema untuk difokuskan:", all_themes)

    if selected_theme != "Semua Tema":
        df_filtered = df[df['topic_theme'] == selected_theme].copy()
    else:
        df_filtered = df.copy()

    # --- TAMPILAN UTAMA DENGAN TAB ---
    tab1, tab2, tab3 = st.tabs(["üìä Ringkasan Tema", "üó∫Ô∏è Peta Topik & Kata Kunci", "üìñ Detail Hadits"])

    with tab1:
        st.markdown('<h2 class="sub-header">Distribusi Hadits per Tema</h2>', unsafe_allow_html=True)

        theme_counts = df_filtered['topic_theme'].value_counts().reset_index()
        theme_counts.columns = ['Tema', 'Jumlah Hadits']

        fig = px.bar(
            theme_counts.head(20),
            x='Jumlah Hadits',
            y='Tema',
            orientation='h',
            title='Top 20 Tema dengan Hadits Terbanyak' if selected_theme == "Semua Tema" else f'Distribusi untuk Tema: {selected_theme}',
            labels={'Tema': 'Tema Hadits', 'Jumlah Hadits': 'Jumlah Hadits'},
            color='Jumlah Hadits',
            color_continuous_scale=px.colors.sequential.Teal,
            height=600
        )
        fig.update_layout(yaxis={'categoryorder':'total ascending'})
        st.plotly_chart(fig, use_container_width=True)

    with tab2:
        st.markdown('<h2 class="sub-header">Visualisasi Hubungan Antar Tema</h2>', unsafe_allow_html=True)
        st.info("Peta ini menunjukkan seberapa dekat hubungan antar tema. Tema yang berdekatan memiliki kemiripan makna.")

        try:
            topics_to_highlight = df_filtered['topic'].unique().tolist() if selected_theme != "Semua Tema" else None
            fig_topics = topic_model.visualize_topics(custom_labels=True, topics=topics_to_highlight)
            st.plotly_chart(fig_topics, use_container_width=True)
        except Exception as e:
            st.warning(f"Tidak dapat membuat peta topik interaktif. Error: {e}")

        st.markdown('<h2 class="sub-header">Kata Kunci Utama per Tema</h2>', unsafe_allow_html=True)
        st.info("Grafik ini menunjukkan kata-kata paling penting yang mendefinisikan setiap tema, berdasarkan skor c-TF-IDF.")

        try:
            fig_barchart = topic_model.visualize_barchart(
                topics=df_filtered['topic'].unique().tolist()[:10],
                n_words=10,
                custom_labels=True,
                height=500
            )
            st.plotly_chart(fig_barchart, use_container_width=True)
        except Exception as e:
            st.warning(f"Tidak dapat membuat grafik kata kunci. Error: {e}")

    with tab3:
        st.markdown(f'<h2 class="sub-header">Jelajahi Hadits dalam Tema: {selected_theme}</h2>', unsafe_allow_html=True)

        if df_filtered.empty:
            st.warning("Tidak ada hadits untuk ditampilkan dengan filter saat ini.")
        else:
            items_per_page = 10
            total_items = len(df_filtered)
            total_pages = (total_items // items_per_page) + (1 if total_items % items_per_page > 0 else 0)

            page_number = st.number_input(f'Halaman (Total {total_pages} halaman)', min_value=1, max_value=total_pages, value=1)

            start_idx = (page_number - 1) * items_per_page
            end_idx = start_idx + items_per_page

            df_page = df_filtered.iloc[start_idx:end_idx]

            for index, row in df_page.iterrows():
                with st.container():
                    st.markdown('<div class="hadith-expander">', unsafe_allow_html=True)
                    st.markdown(f"**Perawi:** {row['Perawi']}")
                    st.markdown(f"**Tema:** {row['topic_theme']}")
                    st.markdown("---")
                    st.write(f"_{row['Terjemahan']}_")
                    st.markdown('</div>', unsafe_allow_html=True)

if __name__ == "__main__":
    main()